Service
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

export interface InfraRole {
  id: number;  // Optional because it's auto-generated by the backend
  infraType: string;
  infraRoleName: string;
  activeStatus: boolean;
  rowVersion?: string;
  createdBy?: string;
  createdDate?: string;
  updatedBy?: string;
  updatedDate?: string;
}
@Injectable({
  providedIn: 'root'
})
export class InfaroleService {

  private apiUrl = 'http://192.168.6.135:8012/api/InfraRole';

  constructor(private http: HttpClient) { }


  createInfraRole(infraRole: Omit<InfraRole, 'id' | 'rowVersion' | 'createdBy' | 'updatedBy' | 'createdDate' | 'updatedDate'>): Observable<InfraRole> {
    return this.http.post<InfraRole>(this.apiUrl, infraRole);
  }
   getInfraRoles(): Observable<InfraRole[]> {
    return this.http.get<InfraRole[]>(this.apiUrl);
  }
  updateInfraRole(id: number, data: InfraRole): Observable<InfraRole> {
    return this.http.put<InfraRole>(`${this.apiUrl}/Edit?id=${id}`, data);
  }
  deleteInfraRole(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/Delete?id=${id}`, { responseType: 'text' as 'json' });
  }
}
CSS
.error{
    border-color: red;
}

.errorDiv{
    font-size: xx-small;
}

Component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { CommonModalService } from 'src/app/components/common-modal/common-modal.service';
import { SpinnerService } from 'src/app/components/spinner/spinner.service';
import { CommonPopupComponent } from 'src/app/components/common-popup/common-popup.component';
import { InfaroleService, InfraRole } from './infarole.service';

@Component({
  selector: 'app-infrarole',
  templateUrl: './infrarole.component.html',
  styleUrls: ['./infrarole.component.scss'],
})
export class InfraroleComponent implements OnInit {
  submitted = false;
  infraRoleData: InfraRole[] = [];
  infraRoleForm!: FormGroup;
  isEditMode: boolean = false;
  editIndex: number | null = null;
  searchButtonDisabled = true;

  constructor(
    private fb: FormBuilder,
    public spinnerService: SpinnerService,
    private modal: CommonModalService,
    private dialog: MatDialog,
    private infraRoleService: InfaroleService
  ) {}

  ngOnInit(): void {
    this.createForm();
    this.loadInfraRoles();
  }

  createForm() {
    this.infraRoleForm = this.fb.group({
      infraType: ['', Validators.required],
      infraRoleName: ['', Validators.required],
      activeStatus: ['', Validators.required],
      rowVersion: [''],  
      createdBy: [''],   
      createdDate: [''], 
      updatedBy: [''],   
      updatedDate: ['']  
    });
  }

  get infraType() {
    return this.infraRoleForm.get('infraType');
  }

  get infraRoleName() {
    return this.infraRoleForm.get('infraRoleName');
  }

  get activeStatus() {
    return this.infraRoleForm.get('activeStatus');
  }

  loadInfraRoles() {
    this.infraRoleService.getInfraRoles().subscribe(
      data => {
        this.infraRoleData = data;
      },
      error => {
        console.error('Error fetching InfraRoles:', error);
        this.dialog.open(CommonPopupComponent, {
          data: {
            title: 'Error',
            full_data: 'An error occurred while fetching InfraRoles.',
          },
        });
      }
    );
  }

  onSubmit() {
    this.submitted = true;
  
    if (this.infraRoleForm.invalid) {
      this.dialog.open(CommonPopupComponent, {
        data: {
          title: 'Error',
          full_data: 'Please fill out the form correctly.',
        },
      });
      return;
    }
  
    const infraRoleData: InfraRole = {
      id: this.isEditMode ? this.infraRoleData[this.editIndex!].id : 0,
      infraType: this.infraRoleForm.value.infraType,
      infraRoleName: this.infraRoleForm.value.infraRoleName,
      activeStatus: this.infraRoleForm.value.activeStatus === 'Active',
      rowVersion: this.infraRoleForm.value.rowVersion || '', 
      createdBy: this.infraRoleForm.value.createdBy || '', 
      updatedBy: this.infraRoleForm.value.updatedBy || '', 
      createdDate: this.isEditMode ? this.infraRoleData[this.editIndex!].createdDate : new Date().toISOString(),
      updatedDate: new Date().toISOString()
    };
  
    if (this.isEditMode && this.editIndex !== null) {
      // Update existing entry
      this.infraRoleService.updateInfraRole(infraRoleData.id, infraRoleData).subscribe(
        response => {
          console.log('InfraRole updated successfully:', response);
          this.modal.openModal('Success', 'Data Updated Successfully!', 'success');
          if (this.editIndex !== null) {
            this.infraRoleData[this.editIndex] = response; 
          }
          this.infraRoleForm.reset();
          this.submitted = false;
          this.isEditMode = false;
        },
        error => {
          console.error('Error updating InfraRole:', error);
          this.dialog.open(CommonPopupComponent, {
            data: {
              title: 'Error',
              full_data: 'An error occurred while updating the InfraRole.',
            },
          });
        }
      );
    } else {
      // Create new entry
      this.infraRoleService.createInfraRole(infraRoleData).subscribe(
        response => {
          console.log('InfraRole created successfully:', response);
          this.modal.openModal('Success', 'Data Uploaded Successfully!', 'success');
          this.infraRoleData.push(response);
          this.infraRoleForm.reset();
          this.submitted = false;
          this.isEditMode = false;
        },
        error => {
          console.error('Error creating InfraRole:', error);
          this.dialog.open(CommonPopupComponent, {
            data: {
              title: 'Error',
              full_data: 'An error occurred while creating the InfraRole.',
            },
          });
        }
      );
    }
  }

  onReset() {
    this.infraRoleForm.reset();
    this.submitted = false;
    this.isEditMode = false;
    this.dialog.open(CommonPopupComponent, {
      data: {
        title: 'Reset',
        full_data: 'Form has been reset.',
      },
    });
  }

  onEdit(item: InfraRole, index: number | null) {
    if (index !== null) {
      this.infraRoleForm.patchValue({
        infraType: item.infraType,
        infraRoleName: item.infraRoleName,
        activeStatus: item.activeStatus ? 'Active' : 'Inactive',
        rowVersion: item.rowVersion || '', 
        createdBy: item.createdBy || '', 
        updatedBy: item.updatedBy || '',
        createdDate: item.createdDate || '', 
        updatedDate: item.updatedDate || ''
      });
      this.isEditMode = true;
      this.editIndex = index; // Ensure editIndex is not null
    } else {
      console.error('Index is null or undefined in onEdit method');
    }
  }
  
  onDelete(item: InfraRole) {

    this.infraRoleService.deleteInfraRole(item.id).subscribe(
      (response) => {
        console.log("delete",response)
        this.loadInfraRoles();
        this.modal.openModal('Success', 'Data Deleted Successfully!', 'success');
      },
      error => {
       
        console.error('Error deleting InfraRole:', error);
        
      }
    );
  }
  

  onSearch() {

  }
}

<div class="content-body">
    <!-- row -->
    <div class="container-fluid">
      <!-- Add Order -->
      <!-- row -->
      <div class="row">
        <div class="col-lg-12">
          <div class="card">
            <div class="card-header">
              <h4 class="card-title">INFRA ROLE MASTER</h4>
            </div>
            <div class="card-body">
              <form [formGroup]="infraRoleForm" (ngSubmit)="onSubmit()">
              <div>
                <div class="row">
                  <div class="col-md-2 col-sm-6 set_c_p8">Infra Type <span class="txt_r">*</span>:</div>
                  <div class="col-md-4 col-sm-6 set_c_2p8">
                    <div class="form-group">
                      <input type="radio" name="infraType" formControlName="infraType" value="Database"  class="mrg_rgt5" >
                     Database &nbsp;
                      <input type="radio" name="infraType"  formControlName="infraType"  value="Middleware"  class="mrg_rgt5">
                     Middleware</div>
                  </div>
                  <div class="col-md-2 col-sm-6 set_c_p8">Infra Role Name <span class="txt_r">*</span>:</div>
                  <div class="col-md-4 col-sm-6">
                    <div class="form-group">
                      <input type="text" class="form-control" value="" formControlName="infraRoleName" placeholder="Infra Role Name" [ngClass]="{ 'error': submitted && infraRoleForm.get('infraRoleName')?.invalid }"  style="float:left; margin-bottom:5px;">
                      <div class="errorDiv" *ngIf="infraRoleForm.get('infraRoleName')?.invalid && (infraRoleForm.get('infraRoleName')?.dirty || infraRoleForm.get('infraRoleName')?.touched)" style="color: red">
                        Please Enter Valid Application Descriptions!
                      </div>
                    </div>
                  </div>
                  <div class="col-md-2 col-sm-6 set_c_p8">Active Status <span class="txt_r">*</span> :</div>
                  <div class="col-md-4 col-sm-6 set_c_2p8">
                    <div class="form-group">
                      <input type="radio" name="activeStatus" class="mrg_rgt5" formControlName="activeStatus" value="Active">
                      Active &nbsp;
                      <input type="radio" name="activeStatus" class="mrg_rgt5"  formControlName="activeStatus" value="Inactive">
                      Inactive</div>
                  </div>
                    <!-- [disabled]="infraRoleForm.invalid" -->
                 
                  <div class="col-md-12 col-sm-12 btn_s">
                    <button type="submit" class="btn btn-primary"  [disabled]="infraRoleForm.invalid" style="margin-right: 10px;">
                        {{ isEditMode ? 'Update' : 'Submit' }}
                    </button>
                    <button type="button" class="btn btn-primary" (click)="onReset()" style="margin-right: 10px;">Reset
                    </button>
                    <button type="button" class="btn btn-primary"  (click)="onSearch()"   [disabled]="searchButtonDisabled" >Search</button>
                </div>
                </div>
              </div>
            </form>
              <div class="table-responsive">
                <table class="table table-bordered verticle-middle table-responsive-sm">
                  <thead>
                    <tr style="background: #e1e8f6;">
                      <th scope="col">Infra Type</th>
                      <th scope="col">Infra Role Name</th>
                      <th scope="col">Status</th>
                      <th scope="col">Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr *ngFor="let item of infraRoleData; let i = index">
                      <td>{{ item.infraType }}</td>
                      <td>{{ item.infraRoleName }}</td>
                      <td>{{ item.activeStatus ? 'Active' : 'Inactive' }}</td>
                      <td>
                        <span>
                          <a href="javascript:void()" class="mr-4" (click)="onEdit(item, i)" data-toggle="tooltip" data-placement="top" title="Edit">
                            <i class="fa fa-pencil color-muted"></i>
                          </a>
                          <a href="javascript:void(0);" data-placement="top" data-toggle="tooltip" data-dismiss="alert" aria-label="Close" title="Delete" (click)="onDelete(item)">
                            <i class="fa fa-close color-danger"></i>
                          </a>
                        </span>
                      </td>
                    </tr>
                  </tbody>
                </table>
			  </div>

         <app-pagination  #pagination
                        [collectionSize]="infraRoleData.length"
                        [pageSize]="5"
                        [firstLastButtons]="true"
                        [maxSize]="2">
        </app-pagination> 

            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

 
  
